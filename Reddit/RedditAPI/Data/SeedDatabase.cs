using RedditDomain.Entities;
using Thread = RedditDomain.Entities.Thread;

namespace RedditAPI.Data;

public static class SeedDatabase
{
    public static async Task SeedDatabaseWithDummyData(RedditContext context)
    {
        //Dummy data is generated by chatGPT
        if (!context.Threads.Any())
        {
            var mockData = new (string AuthorName, string Title, string Content, (string AuthorName, string Title, string Content)[] comments)[]
            {
                ("TechFan101", "What's the best budget smartphone right now?", "Looking to buy a new phone but I'm on a tight budget. Any recommendations?", new []{("PhoneGuru", "Re: Best budget smartphone", "I recommend the XPhone SE. It's not the latest model, but it offers great value for its price."),
                    ("Techie", "Re: Best budget smartphone", "Check out the Z-Droid 10. It's budget-friendly and has all the features most people need."),
                    ("BudgetBuyer", "Re: Best budget smartphone", "You can't go wrong with older models of flagship phones. Some of them are sold at half the price now.")}),
                ("TravelGuru", "Share your most memorable travel story!", "I love hearing about people's travel adventures. Here's mine...", new []{("Wanderlust", "Re: Memorable travel story", "My trip to the Himalayas was life-changing. The mountains are mesmerizing!"),
                    ("TravelAddict", "Re: Memorable travel story", "I got lost in Venice's alleyways and stumbled upon the most amazing little cafe."),
                    ("GlobeTrotter", "Re: Memorable travel story", "Camping under the northern lights in Iceland was a dream come true.")}),
                ("DailyBaker", "Failed at making sourdough bread", "This is my third attempt and it's still not right. Any tips?", new []{("BreadLover", "Re: Sourdough trouble", "It sounds like your starter might not be active enough. Have you tried feeding it more frequently?"),
                    ("PastryChef", "Re: Sourdough trouble", "Keep at it! Sourdough can be tricky. Make sure your water is dechlorinated."),
                    ("HomeBaker", "Re: Sourdough trouble", "Temperature is key. Try keeping your dough in a warmer spot to help the yeast work.")}),
                ("ScienceNerd", "Latest Mars rover discoveries?", "Can someone catch me up on the recent findings from the Mars rover?", new []{("AstroFan", "Re: Mars rover discoveries", "The rover found evidence of water in the Martian soil which could mean past life!"),
                    ("SpaceJunkie", "Re: Mars rover discoveries", "Just read an article about organic compounds in rock samples. This is huge!"),
                    ("MarsGeek", "Re: Mars rover discoveries", "I'm most excited about the seasonal methane spikes. Could it be microbial life?")}),
                ("MovieBuff88", "Movies that you think are underrated?", "Let's talk about movies that deserve more attention.", new []{("Cinephile", "Re: Underrated movies", "Check out 'The Fall' by Tarsem Singh. Visually stunning and deeply moving."),
                    ("FilmCritic", "Re: Underrated movies", "'Coherence' is a mind-bending thriller that didn't get enough attention."),
                    ("MovieManiac", "Re: Underrated movies", "'Moon' deserves more recognition. Sam Rockwell's performance is brilliant.")}),
                ("FitnessFreak", "Home workout routines?", "Looking for some effective home workouts, as I can't go to the gym now.", new []{("YogaLover", "Re: Home workouts", "Yoga can be very rewarding and doesn't require any equipment."),
                    ("FitDad", "Re: Home workouts", "Bodyweight exercises like push-ups and squats can be quite effective."),
                    ("WorkoutNewbie", "Re: Home workouts", "I've started jumping rope, and it's a fantastic cardio workout!")}),
                ("Bookworm", "Book recommendations for sci-fi lovers?", "Need some new sci-fi book suggestions. What are your favorites?", new []{("SciFiReader", "Re: Sci-fi book recommendations", "'Dune' is a classic if you haven't read it yet."),
                    ("LitGeek", "Re: Sci-fi book recommendations", "I just finished 'The Expanse' series and it's amazing! Highly recommend."),
                    ("BookCollector", "Re: Sci-fi book recommendations", "For something different, 'The Left Hand of Darkness' by Ursula K. Le Guin is superb.")}),
                ("Gamer123", "Thoughts on the new VR game release?", "Has anyone tried that new VR game? Is it worth the hype?", new []{("GamerPro", "Re: New VR game", "It's groundbreaking! The immersion level is unlike any other game I've played."),
                    ("VirtualVoyager", "Re: New VR game", "Had some motion sickness issues, but it's still a phenomenal game."),
                    ("TechWizard", "Re: New VR game", "The graphics are top-notch, but the storyline could use some work.")}),
                ("HistoryBuff", "What's an interesting historical fact that most people don't know?", "I love random historical tidbits, share yours!", new []{("HistoryMajor", "Re: Interesting historical fact", "The Great Emu War in Australia. Yes, it was a real thing."),
                    ("TriviaBuff", "Re: Interesting historical fact", "Did you know that Napoleon was once attacked by a horde of rabbits?"),
                    ("FactFinder", "Re: Interesting historical fact", "The shortest war in history was between Britain and Zanzibar on August 27, 1896. It lasted just 38 minutes.")}),
                ("MusicLover", "What's your current favorite song?", "I need to refresh my playlist. Suggestions?", new []{("MusicMan", "Re: Favorite song", "I can't get 'Blinding Lights' by The Weeknd out of my head."),
                    ("Songbird", "Re: Favorite song", "'Dance Monkey' by Tones and I has been on repeat for me."),
                    ("AudioAddict", "Re: Favorite song", "Old but gold - 'Bohemian Rhapsody' will always be a top pick for me."),})
            };

            var rnd = new Random();

            foreach (var data in mockData)
            {
                var thread = new Thread(data.AuthorName, data.Title, data.Content)
                {
                    DownvoteCount = rnd.Next(30),
                    UpvoteCount = rnd.Next(50)
                };

                await context.Threads.AddAsync(thread);
                await context.SaveChangesAsync();

                thread.Comments.AddRange(data.comments.Select(comment => new Comment(thread.Id, comment.AuthorName, comment.Title, comment.Content)
                {
                    UpvoteCount = rnd.Next(10),
                    DownvoteCount = rnd.Next(5)
                }));

                await context.SaveChangesAsync();

            }
        }
    }
}